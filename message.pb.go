// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package queuerpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Type int32

const (
	Type_UNARY         Type = 0
	Type_SERVER_STREAM Type = 1
)

var Type_name = map[int32]string{
	0: "UNARY",
	1: "SERVER_STREAM",
}

var Type_value = map[string]int32{
	"UNARY":         0,
	"SERVER_STREAM": 1,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

// Message is an rpc message sent over a message-queue it is used as a client side request and server side response
type Message struct {
	// id is the message id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// type is the message type
	Type Type `protobuf:"varint,2,opt,name=type,proto3,enum=queuerpc.Type" json:"type,omitempty"`
	// method is the method to call
	Method string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	// reply_to is the reply queue to send the response to
	ReplyTo string `protobuf:"bytes,4,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	// body is the message body
	Body []byte `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	// metadata is a map of key value pairs
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Error is set if the message failed to be processed
	Error *Error `protobuf:"bytes,7,opt,name=error,proto3" json:"error,omitempty"`
	// unix timestamp in milliseconds
	Timestamp            int64    `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Message) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_UNARY
}

func (m *Message) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Message) GetReplyTo() string {
	if m != nil {
		return m.ReplyTo
	}
	return ""
}

func (m *Message) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Message) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Message) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Message) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// Error is an rpc error
type Error struct {
	// message is the error message
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// code is the error code
	Code                 uint32   `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Error) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterEnum("queuerpc.Type", Type_name, Type_value)
	proto.RegisterType((*Message)(nil), "queuerpc.Message")
	proto.RegisterMapType((map[string]string)(nil), "queuerpc.Message.MetadataEntry")
	proto.RegisterType((*Error)(nil), "queuerpc.Error")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x4f, 0x6b, 0xe3, 0x30,
	0x10, 0xc5, 0x57, 0xfe, 0x13, 0xdb, 0x93, 0x75, 0x36, 0x3b, 0x2c, 0x8b, 0x76, 0x69, 0x89, 0x09,
	0x2d, 0x98, 0x1e, 0x1c, 0x48, 0x29, 0x84, 0xe6, 0x94, 0x82, 0x8f, 0xe9, 0x41, 0x49, 0x0b, 0xed,
	0x25, 0x38, 0xb1, 0x48, 0x4c, 0xe3, 0xca, 0x55, 0xe4, 0x82, 0x3f, 0x5f, 0xbf, 0x58, 0xb1, 0xec,
	0x34, 0xf4, 0x36, 0x6f, 0x9e, 0x7e, 0x1a, 0xcd, 0x13, 0xf8, 0x39, 0x3f, 0x1c, 0x92, 0x2d, 0x8f,
	0x0a, 0x29, 0x94, 0x40, 0xf7, 0xad, 0xe4, 0x25, 0x97, 0xc5, 0x66, 0xf8, 0x61, 0x80, 0x33, 0x6f,
	0x3c, 0xec, 0x81, 0x91, 0xa5, 0x94, 0x04, 0x24, 0xf4, 0x98, 0x91, 0xa5, 0x38, 0x04, 0x4b, 0x55,
	0x05, 0xa7, 0x46, 0x40, 0xc2, 0xde, 0xb8, 0x17, 0x1d, 0xa1, 0x68, 0x59, 0x15, 0x9c, 0x69, 0x0f,
	0xff, 0x42, 0x27, 0xe7, 0x6a, 0x27, 0x52, 0x6a, 0x6a, 0xae, 0x55, 0xf8, 0x0f, 0x5c, 0xc9, 0x8b,
	0x7d, 0xb5, 0x52, 0x82, 0x5a, 0xda, 0x71, 0xb4, 0x5e, 0x0a, 0x44, 0xb0, 0xd6, 0x22, 0xad, 0xa8,
	0x1d, 0x90, 0xf0, 0x27, 0xd3, 0x35, 0x4e, 0xc1, 0xcd, 0xb9, 0x4a, 0xd2, 0x44, 0x25, 0xb4, 0x13,
	0x98, 0x61, 0x77, 0x3c, 0x38, 0x8d, 0x6b, 0xdf, 0x17, 0xcd, 0xdb, 0x13, 0xf1, 0xab, 0x92, 0x15,
	0xfb, 0x02, 0xf0, 0x12, 0x6c, 0x2e, 0xa5, 0x90, 0xd4, 0x09, 0x48, 0xd8, 0x1d, 0xff, 0x3a, 0x91,
	0x71, 0xdd, 0x66, 0x8d, 0x8b, 0x67, 0xe0, 0xa9, 0x2c, 0xe7, 0x07, 0x95, 0xe4, 0x05, 0x75, 0x03,
	0x12, 0x9a, 0xec, 0xd4, 0xf8, 0x3f, 0x05, 0xff, 0xdb, 0xfd, 0xd8, 0x07, 0xf3, 0x85, 0x57, 0x6d,
	0x1c, 0x75, 0x89, 0x7f, 0xc0, 0x7e, 0x4f, 0xf6, 0x65, 0x13, 0x88, 0xc7, 0x1a, 0x71, 0x6b, 0x4c,
	0xc8, 0xf0, 0x06, 0x6c, 0x3d, 0x0a, 0x29, 0x38, 0x6d, 0xd2, 0x2d, 0x78, 0x94, 0xf5, 0xd6, 0x1b,
	0x91, 0x36, 0xac, 0xcf, 0x74, 0x7d, 0x75, 0x01, 0x56, 0x1d, 0x25, 0x7a, 0x60, 0x3f, 0xdc, 0xcf,
	0xd8, 0x53, 0xff, 0x07, 0xfe, 0x06, 0x7f, 0x11, 0xb3, 0xc7, 0x98, 0xad, 0x16, 0x4b, 0x16, 0xcf,
	0xe6, 0x7d, 0x72, 0x37, 0x78, 0x3e, 0xdf, 0x66, 0x6a, 0x57, 0xae, 0xa3, 0x8d, 0xc8, 0x47, 0x49,
	0xa9, 0x44, 0x3e, 0x51, 0x5c, 0x8e, 0x8e, 0x5b, 0xae, 0x3b, 0xfa, 0x53, 0xaf, 0x3f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x62, 0x41, 0x73, 0x10, 0xe5, 0x01, 0x00, 0x00,
}
